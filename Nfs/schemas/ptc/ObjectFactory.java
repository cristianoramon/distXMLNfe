//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2006.09.21 at 02:41:30 PM GMT-03:00 
//


package ptc;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the ptc package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
public class ObjectFactory
    extends ptc.impl.runtime.DefaultJAXBContextImpl
{

    private static java.util.HashMap defaultImplementations = new java.util.HashMap(41, 0.75F);
    private static java.util.HashMap rootTagMap = new java.util.HashMap();
    public final static ptc.impl.runtime.GrammarInfo grammarInfo = new ptc.impl.runtime.GrammarInfoImpl(rootTagMap, defaultImplementations, (ptc.ObjectFactory.class));
    public final static java.lang.Class version = (ptc.impl.JAXBVersion.class);

    static {
        defaultImplementations.put((ptc.TVeiculo.class), "ptc.impl.TVeiculoImpl");
        defaultImplementations.put((ptc.Signature.class), "ptc.impl.SignatureImpl");
        defaultImplementations.put((ptc.TPTC.TranspType.TransportaType.class), "ptc.impl.TPTCImpl.TranspTypeImpl.TransportaTypeImpl");
        defaultImplementations.put((ptc.TNFe.InfNFeType.DestType.class), "ptc.impl.TNFeImpl.InfNFeTypeImpl.DestTypeImpl");
        defaultImplementations.put((ptc.ReferenceType.DigestMethodType.class), "ptc.impl.ReferenceTypeImpl.DigestMethodTypeImpl");
        defaultImplementations.put((ptc.X509DataType.class), "ptc.impl.X509DataTypeImpl");
        defaultImplementations.put((ptc.TNFe.class), "ptc.impl.TNFeImpl");
        defaultImplementations.put((ptc.TNFe.InfNFeType.EmitType.class), "ptc.impl.TNFeImpl.InfNFeTypeImpl.EmitTypeImpl");
        defaultImplementations.put((ptc.KeyInfoType.class), "ptc.impl.KeyInfoTypeImpl");
        defaultImplementations.put((ptc.TNFe.InfNFeType.TotalType.class), "ptc.impl.TNFeImpl.InfNFeTypeImpl.TotalTypeImpl");
        defaultImplementations.put((ptc.TNFe.InfNFeType.IdeType.class), "ptc.impl.TNFeImpl.InfNFeTypeImpl.IdeTypeImpl");
        defaultImplementations.put((ptc.TNFe.InfNFeType.class), "ptc.impl.TNFeImpl.InfNFeTypeImpl");
        defaultImplementations.put((ptc.TransformType.XPath.class), "ptc.impl.TransformTypeImpl.XPathImpl");
        defaultImplementations.put((ptc.SignedInfoType.class), "ptc.impl.SignedInfoTypeImpl");
        defaultImplementations.put((ptc.TPTC.TranspType.class), "ptc.impl.TPTCImpl.TranspTypeImpl");
        defaultImplementations.put((ptc.KeyValueType.class), "ptc.impl.KeyValueTypeImpl");
        defaultImplementations.put((ptc.TPTC.class), "ptc.impl.TPTCImpl");
        defaultImplementations.put((ptc.TNFe.InfNFeType.TotalType.ICMSTotType.class), "ptc.impl.TNFeImpl.InfNFeTypeImpl.TotalTypeImpl.ICMSTotTypeImpl");
        defaultImplementations.put((ptc.TPTC.DadosFiscoType.class), "ptc.impl.TPTCImpl.DadosFiscoTypeImpl");
        defaultImplementations.put((ptc.TPTC.TranspType.CondutorType.class), "ptc.impl.TPTCImpl.TranspTypeImpl.CondutorTypeImpl");
        defaultImplementations.put((ptc.SignatureValueType.class), "ptc.impl.SignatureValueTypeImpl");
        defaultImplementations.put((ptc.ReferenceType.class), "ptc.impl.ReferenceTypeImpl");
        defaultImplementations.put((ptc.DadosNFs.class), "ptc.impl.DadosNFsImpl");
        defaultImplementations.put((ptc.KeyValueType.RSAKeyValueType.class), "ptc.impl.KeyValueTypeImpl.RSAKeyValueTypeImpl");
        defaultImplementations.put((ptc.SignatureType.class), "ptc.impl.SignatureTypeImpl");
        defaultImplementations.put((ptc.TransformType.class), "ptc.impl.TransformTypeImpl");
        defaultImplementations.put((ptc.TransformsType.class), "ptc.impl.TransformsTypeImpl");
        defaultImplementations.put((ptc.SignedInfoType.SignatureMethodType.class), "ptc.impl.SignedInfoTypeImpl.SignatureMethodTypeImpl");
        defaultImplementations.put((ptc.PTC.class), "ptc.impl.PTCImpl");
        defaultImplementations.put((ptc.SignedInfoType.CanonicalizationMethodType.class), "ptc.impl.SignedInfoTypeImpl.CanonicalizationMethodTypeImpl");
        rootTagMap.put(new javax.xml.namespace.QName("http://www.w3.org/2000/09/xmldsig#", "Signature"), (ptc.Signature.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://www.portalfiscal.inf.br/ptc", "PTC"), (ptc.PTC.class));
        rootTagMap.put(new javax.xml.namespace.QName("http://www.portalfiscal.inf.br/ptc", "dadosNFs"), (ptc.DadosNFs.class));
    }

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: ptc
     * 
     */
    public ObjectFactory() {
        super(grammarInfo);
    }

    /**
     * Create an instance of the specified Java content interface.
     * 
     * @param javaContentInterface
     *     the Class object of the javacontent interface to instantiate
     * @return
     *     a new instance
     * @throws JAXBException
     *     if an error occurs
     */
    public java.lang.Object newInstance(java.lang.Class javaContentInterface)
        throws javax.xml.bind.JAXBException
    {
        return super.newInstance(javaContentInterface);
    }

    /**
     * Get the specified property. This method can only be
     * used to get provider specific properties.
     * Attempting to get an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param name
     *     the name of the property to retrieve
     * @return
     *     the value of the requested property
     * @throws PropertyException
     *     when there is an error retrieving the given property or value
     */
    public java.lang.Object getProperty(java.lang.String name)
        throws javax.xml.bind.PropertyException
    {
        return super.getProperty(name);
    }

    /**
     * Set the specified property. This method can only be
     * used to set provider specific properties.
     * Attempting to set an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param value
     *     the value of the property to be set
     * @param name
     *     the name of the property to retrieve
     * @throws PropertyException
     *     when there is an error processing the given property or value
     */
    public void setProperty(java.lang.String name, java.lang.Object value)
        throws javax.xml.bind.PropertyException
    {
        super.setProperty(name, value);
    }

    /**
     * Create an instance of TVeiculo
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.TVeiculo createTVeiculo()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.TVeiculoImpl();
    }

    /**
     * Create an instance of Signature
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.Signature createSignature()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.SignatureImpl();
    }

    /**
     * Create an instance of TPTCTranspTypeTransportaType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.TPTC.TranspType.TransportaType createTPTCTranspTypeTransportaType()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.TPTCImpl.TranspTypeImpl.TransportaTypeImpl();
    }

    /**
     * Create an instance of TNFeInfNFeTypeDestType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.TNFe.InfNFeType.DestType createTNFeInfNFeTypeDestType()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.TNFeImpl.InfNFeTypeImpl.DestTypeImpl();
    }

    /**
     * Create an instance of ReferenceTypeDigestMethodType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.ReferenceType.DigestMethodType createReferenceTypeDigestMethodType()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.ReferenceTypeImpl.DigestMethodTypeImpl();
    }

    /**
     * Create an instance of X509DataType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.X509DataType createX509DataType()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.X509DataTypeImpl();
    }

    /**
     * Create an instance of TNFe
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.TNFe createTNFe()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.TNFeImpl();
    }

    /**
     * Create an instance of TNFeInfNFeTypeEmitType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.TNFe.InfNFeType.EmitType createTNFeInfNFeTypeEmitType()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.TNFeImpl.InfNFeTypeImpl.EmitTypeImpl();
    }

    /**
     * Create an instance of KeyInfoType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.KeyInfoType createKeyInfoType()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.KeyInfoTypeImpl();
    }

    /**
     * Create an instance of TNFeInfNFeTypeTotalType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.TNFe.InfNFeType.TotalType createTNFeInfNFeTypeTotalType()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.TNFeImpl.InfNFeTypeImpl.TotalTypeImpl();
    }

    /**
     * Create an instance of TNFeInfNFeTypeIdeType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.TNFe.InfNFeType.IdeType createTNFeInfNFeTypeIdeType()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.TNFeImpl.InfNFeTypeImpl.IdeTypeImpl();
    }

    /**
     * Create an instance of TNFeInfNFeType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.TNFe.InfNFeType createTNFeInfNFeType()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.TNFeImpl.InfNFeTypeImpl();
    }

    /**
     * Create an instance of TransformTypeXPath
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.TransformType.XPath createTransformTypeXPath()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.TransformTypeImpl.XPathImpl();
    }

    /**
     * Create an instance of TransformTypeXPath
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.TransformType.XPath createTransformTypeXPath(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.TransformTypeImpl.XPathImpl(value);
    }

    /**
     * Create an instance of SignedInfoType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.SignedInfoType createSignedInfoType()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.SignedInfoTypeImpl();
    }

    /**
     * Create an instance of TPTCTranspType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.TPTC.TranspType createTPTCTranspType()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.TPTCImpl.TranspTypeImpl();
    }

    /**
     * Create an instance of KeyValueType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.KeyValueType createKeyValueType()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.KeyValueTypeImpl();
    }

    /**
     * Create an instance of TPTC
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.TPTC createTPTC()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.TPTCImpl();
    }

    /**
     * Create an instance of TNFeInfNFeTypeTotalTypeICMSTotType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.TNFe.InfNFeType.TotalType.ICMSTotType createTNFeInfNFeTypeTotalTypeICMSTotType()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.TNFeImpl.InfNFeTypeImpl.TotalTypeImpl.ICMSTotTypeImpl();
    }

    /**
     * Create an instance of TPTCDadosFiscoType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.TPTC.DadosFiscoType createTPTCDadosFiscoType()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.TPTCImpl.DadosFiscoTypeImpl();
    }

    /**
     * Create an instance of TPTCTranspTypeCondutorType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.TPTC.TranspType.CondutorType createTPTCTranspTypeCondutorType()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.TPTCImpl.TranspTypeImpl.CondutorTypeImpl();
    }

    /**
     * Create an instance of SignatureValueType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.SignatureValueType createSignatureValueType()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.SignatureValueTypeImpl();
    }

    /**
     * Create an instance of ReferenceType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.ReferenceType createReferenceType()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.ReferenceTypeImpl();
    }

    /**
     * Create an instance of DadosNFs
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.DadosNFs createDadosNFs()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.DadosNFsImpl();
    }

    /**
     * Create an instance of KeyValueTypeRSAKeyValueType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.KeyValueType.RSAKeyValueType createKeyValueTypeRSAKeyValueType()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.KeyValueTypeImpl.RSAKeyValueTypeImpl();
    }

    /**
     * Create an instance of SignatureType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.SignatureType createSignatureType()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.SignatureTypeImpl();
    }

    /**
     * Create an instance of TransformType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.TransformType createTransformType()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.TransformTypeImpl();
    }

    /**
     * Create an instance of TransformsType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.TransformsType createTransformsType()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.TransformsTypeImpl();
    }

    /**
     * Create an instance of SignedInfoTypeSignatureMethodType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.SignedInfoType.SignatureMethodType createSignedInfoTypeSignatureMethodType()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.SignedInfoTypeImpl.SignatureMethodTypeImpl();
    }

    /**
     * Create an instance of PTC
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.PTC createPTC()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.PTCImpl();
    }

    /**
     * Create an instance of SignedInfoTypeCanonicalizationMethodType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ptc.SignedInfoType.CanonicalizationMethodType createSignedInfoTypeCanonicalizationMethodType()
        throws javax.xml.bind.JAXBException
    {
        return new ptc.impl.SignedInfoTypeImpl.CanonicalizationMethodTypeImpl();
    }

}
